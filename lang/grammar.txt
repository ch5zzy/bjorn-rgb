?start: instruction+

# Math expressions

?expr: shift
     | expr "<<" shift -> lshift
     | expr ">>" shift -> rshift

?shift: product
      | shift "+" product  -> add
      | shift "-" product  -> sub

?product: atom
        | product "*" atom  -> mul
        | product "/" atom  -> div
        | product "%" atom  -> mod

?atom: NUMBER               -> number
     | "-" atom             -> neg
     | constant
     | math_func
     | NAME                 -> var
     | "(" expr ")"

?math_func: "int(" expr ")"     -> to_int
          | "round(" expr ")"   -> round
          | "ceil(" expr ")"    -> ceil
          | "floor(" expr ")"   -> floor
          | "sqrt(" expr ")"    -> sqrt
          | "log2(" expr ")"    -> log2
          | "sin(" expr ")"     -> sin
          | "cos(" expr ")"     -> cos
          | "pow(" expr "," expr ")"    -> pow

?constant: "TIME"               -> c_time
         | "PI"                 -> c_pi
         | "E"                  -> c_e

# String concatenations and conversions

string: (to_string | string_literal) ("+" (to_string | string_literal))*
to_string: "str(" expr ")"

# Ranges

?range: "(" expr "," expr ")"

# If statements and conditions

?if_statement: if_without_else
            | if_with_else

if_without_else: "if" condition code_block
if_with_else: if_without_else "else" (code_block | if_statement)

condition: eq_check
         | neq_check
         | lt_check
         | gt_check
         | lteq_check
         | gteq_check
         | expr

eq_check: expr "==" expr
neq_check: expr "!=" expr
lt_check: expr "<" expr
gt_check: expr ">" expr
lteq_check: expr "<=" expr
gteq_check: expr ">=" expr

# Variable definitions

define_var: NAME "=" expr

# Macro definitions and usage

define_macro: NAME "=" code_block
use_macro: NAME "()"

# For loops

?for_loop: "for" NAME "in" range code_block

# Built in functions

print: "print(" string ")"
set_pixel: "set_pixel(" expr "," expr "," color ")"
display_clear: "display_clear()"
display_update: "display_update()"

# Instructions
 
?instruction: code_block
            | print
            | define_var
            | define_macro
            | if_statement
            | for_loop
            | set_pixel
            | display_clear
            | display_update
            # use_macro must be last so it is only matched if no others match
            | use_macro

code_block: "{" instruction* "}"
 
# Types

color: hex_color | rgb_color

hex_color: /\$(?:[0-9a-fA-F]{3}){1,2}/
rgb_color: "rgb(" expr "," expr "," expr ")"

string_literal: /\"[^"]*\"/

NAME: /[a-z0-9_]+[\w]*/

%import common.NUMBER
%import common.WS
%import common.SH_COMMENT

%ignore WS
%ignore SH_COMMENT