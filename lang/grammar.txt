?start: instruction+

# Math expressions

?expr: product
    | expr "+" product  -> add
    | expr "-" product  -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div
    | product "%" atom  -> mod
    | product "<<" atom -> lshift
    | product ">>" atom -> rshift

?atom: NUMBER               -> number
     | "-" atom             -> neg
     | NAME                 -> var
     | "(" expr ")"
     | "int(" expr ")"      -> to_int
     | "round(" expr ")"    -> round
     | "ceil(" expr ")"     -> ceil
     | "floor(" expr ")"    -> floor
     | get_time

# String concatenations and conversions

string: (to_string | string_literal) ("+" (to_string | string_literal))*
to_string: "str(" expr ")"

# Ranges

?range: "(" expr "," expr ")"

# If statements and conditions

?if_statement: if_without_else
            | if_with_else

if_without_else: "if" condition code_block
if_with_else: if_without_else "else" (code_block | if_statement)

condition: eq_check
         | neq_check
         | lt_check
         | gt_check
         | lteq_check
         | gteq_check

eq_check: expr "==" expr
neq_check: expr "!=" expr
lt_check: expr "<" expr
gt_check: expr ">" expr
lteq_check: expr "<=" expr
gteq_check: expr ">=" expr

# Variable definitions

define_var: NAME "=" expr

# For loops

?for_loop: "for" NAME "in" range code_block

# Built in functions

log: "log(" string ")"
set_pixel: "set_pixel(" expr "," expr "," color ")"
display_clear: "display_clear()"
display_update: "display_update()"
get_time: "get_time()"

# Instructions
 
?instruction: code_block
            | log
            | define_var
            | if_statement
            | for_loop
            | set_pixel
            | display_clear
            | display_update

code_block: "{" instruction* "}"
 
# Types

color: hex_color | rgb_color

hex_color: /\$(?:[0-9a-fA-F]{3}){1,2}/
rgb_color: "rgb(" expr "," expr "," expr ")"

string_literal: /\"[^"]*\"/

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS

%ignore WS